// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	comments "github.com/dragranzer/capstone-BE-FGD/features/comments"
	mock "github.com/stretchr/testify/mock"
)

// Data is an autogenerated mock type for the Data type
type Data struct {
	mock.Mock
}

// DeleteCommentbyId provides a mock function with given fields: data
func (_m *Data) DeleteCommentbyId(data comments.Core) error {
	ret := _m.Called(data)

	var r0 error
	if rf, ok := ret.Get(0).(func(comments.Core) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteCommentbyThreadId provides a mock function with given fields: data
func (_m *Data) DeleteCommentbyThreadId(data comments.Core) error {
	ret := _m.Called(data)

	var r0 error
	if rf, ok := ret.Get(0).(func(comments.Core) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertComment provides a mock function with given fields: data
func (_m *Data) InsertComment(data comments.Core) error {
	ret := _m.Called(data)

	var r0 error
	if rf, ok := ret.Get(0).(func(comments.Core) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SearchThreadbyComment provides a mock function with given fields: data
func (_m *Data) SearchThreadbyComment(data comments.Core) ([]comments.Core, error) {
	ret := _m.Called(data)

	var r0 []comments.Core
	if rf, ok := ret.Get(0).(func(comments.Core) []comments.Core); ok {
		r0 = rf(data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]comments.Core)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(comments.Core) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectBalasanCommentbyId provides a mock function with given fields: data
func (_m *Data) SelectBalasanCommentbyId(data comments.Core) ([]comments.Core, error) {
	ret := _m.Called(data)

	var r0 []comments.Core
	if rf, ok := ret.Get(0).(func(comments.Core) []comments.Core); ok {
		r0 = rf(data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]comments.Core)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(comments.Core) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectCommentbyId provides a mock function with given fields: data
func (_m *Data) SelectCommentbyId(data comments.Core) (comments.Core, error) {
	ret := _m.Called(data)

	var r0 comments.Core
	if rf, ok := ret.Get(0).(func(comments.Core) comments.Core); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Get(0).(comments.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(comments.Core) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectCommentsThread provides a mock function with given fields: data
func (_m *Data) SelectCommentsThread(data comments.Core) ([]comments.Core, error) {
	ret := _m.Called(data)

	var r0 []comments.Core
	if rf, ok := ret.Get(0).(func(comments.Core) []comments.Core); ok {
		r0 = rf(data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]comments.Core)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(comments.Core) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
