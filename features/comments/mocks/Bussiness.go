// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	comments "github.com/dragranzer/capstone-BE-FGD/features/comments"
	mock "github.com/stretchr/testify/mock"
)

// Bussiness is an autogenerated mock type for the Bussiness type
type Bussiness struct {
	mock.Mock
}

// AddComment provides a mock function with given fields: data
func (_m *Bussiness) AddComment(data comments.Core) error {
	ret := _m.Called(data)

	var r0 error
	if rf, ok := ret.Get(0).(func(comments.Core) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteCommentbyThreadId provides a mock function with given fields: data
func (_m *Bussiness) DeleteCommentbyThreadId(data comments.Core) error {
	ret := _m.Called(data)

	var r0 error
	if rf, ok := ret.Get(0).(func(comments.Core) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeteleCommentThread provides a mock function with given fields: data
func (_m *Bussiness) DeteleCommentThread(data comments.Core) error {
	ret := _m.Called(data)

	var r0 error
	if rf, ok := ret.Get(0).(func(comments.Core) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetBalasanCommentbyId provides a mock function with given fields: data
func (_m *Bussiness) GetBalasanCommentbyId(data comments.Core) ([]comments.Core, error) {
	ret := _m.Called(data)

	var r0 []comments.Core
	if rf, ok := ret.Get(0).(func(comments.Core) []comments.Core); ok {
		r0 = rf(data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]comments.Core)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(comments.Core) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCommentbyId provides a mock function with given fields: data
func (_m *Bussiness) GetCommentbyId(data comments.Core) (comments.Core, error) {
	ret := _m.Called(data)

	var r0 comments.Core
	if rf, ok := ret.Get(0).(func(comments.Core) comments.Core); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Get(0).(comments.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(comments.Core) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCommentsThread provides a mock function with given fields: data
func (_m *Bussiness) GetCommentsThread(data comments.Core) ([]comments.Core, error) {
	ret := _m.Called(data)

	var r0 []comments.Core
	if rf, ok := ret.Get(0).(func(comments.Core) []comments.Core); ok {
		r0 = rf(data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]comments.Core)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(comments.Core) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchThread provides a mock function with given fields: data
func (_m *Bussiness) SearchThread(data comments.Core) ([]comments.Core, error) {
	ret := _m.Called(data)

	var r0 []comments.Core
	if rf, ok := ret.Get(0).(func(comments.Core) []comments.Core); ok {
		r0 = rf(data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]comments.Core)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(comments.Core) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
