// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	threads "github.com/dragranzer/capstone-BE-FGD/features/threads"
	mock "github.com/stretchr/testify/mock"
)

// Bussiness is an autogenerated mock type for the Bussiness type
type Bussiness struct {
	mock.Mock
}

// AddThread provides a mock function with given fields: data
func (_m *Bussiness) AddThread(data threads.Core) error {
	ret := _m.Called(data)

	var r0 error
	if rf, ok := ret.Get(0).(func(threads.Core) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DecrementLike provides a mock function with given fields: data
func (_m *Bussiness) DecrementLike(data threads.Core) error {
	ret := _m.Called(data)

	var r0 error
	if rf, ok := ret.Get(0).(func(threads.Core) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteThreadbyId provides a mock function with given fields: data
func (_m *Bussiness) DeleteThreadbyId(data threads.Core) error {
	ret := _m.Called(data)

	var r0 error
	if rf, ok := ret.Get(0).(func(threads.Core) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllThread provides a mock function with given fields: data
func (_m *Bussiness) GetAllThread(data threads.Core) ([]threads.Core, error) {
	ret := _m.Called(data)

	var r0 []threads.Core
	if rf, ok := ret.Get(0).(func(threads.Core) []threads.Core); ok {
		r0 = rf(data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]threads.Core)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(threads.Core) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetThreadHome provides a mock function with given fields: data
func (_m *Bussiness) GetThreadHome(data threads.Core) ([]threads.Core, error) {
	ret := _m.Called(data)

	var r0 []threads.Core
	if rf, ok := ret.Get(0).(func(threads.Core) []threads.Core); ok {
		r0 = rf(data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]threads.Core)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(threads.Core) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetThreadUser provides a mock function with given fields: data
func (_m *Bussiness) GetThreadUser(data threads.Core) ([]threads.Core, error) {
	ret := _m.Called(data)

	var r0 []threads.Core
	if rf, ok := ret.Get(0).(func(threads.Core) []threads.Core); ok {
		r0 = rf(data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]threads.Core)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(threads.Core) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetThreadbyID provides a mock function with given fields: data
func (_m *Bussiness) GetThreadbyID(data threads.Core) (threads.Core, error) {
	ret := _m.Called(data)

	var r0 threads.Core
	if rf, ok := ret.Get(0).(func(threads.Core) threads.Core); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Get(0).(threads.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(threads.Core) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IncrementComment provides a mock function with given fields: data
func (_m *Bussiness) IncrementComment(data threads.Core) error {
	ret := _m.Called(data)

	var r0 error
	if rf, ok := ret.Get(0).(func(threads.Core) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IncrementLike provides a mock function with given fields: data
func (_m *Bussiness) IncrementLike(data threads.Core) error {
	ret := _m.Called(data)

	var r0 error
	if rf, ok := ret.Get(0).(func(threads.Core) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SearchThread provides a mock function with given fields: data
func (_m *Bussiness) SearchThread(data threads.Core) ([]threads.Core, error) {
	ret := _m.Called(data)

	var r0 []threads.Core
	if rf, ok := ret.Get(0).(func(threads.Core) []threads.Core); ok {
		r0 = rf(data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]threads.Core)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(threads.Core) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
