// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	threads "github.com/dragranzer/capstone-BE-FGD/features/threads"
	mock "github.com/stretchr/testify/mock"
)

// Data is an autogenerated mock type for the Data type
type Data struct {
	mock.Mock
}

// DeleteThreadbyId provides a mock function with given fields: data
func (_m *Data) DeleteThreadbyId(data threads.Core) error {
	ret := _m.Called(data)

	var r0 error
	if rf, ok := ret.Get(0).(func(threads.Core) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertThread provides a mock function with given fields: data
func (_m *Data) InsertThread(data threads.Core) error {
	ret := _m.Called(data)

	var r0 error
	if rf, ok := ret.Get(0).(func(threads.Core) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SearchThread provides a mock function with given fields: data
func (_m *Data) SearchThread(data threads.Core) ([]threads.Core, error) {
	ret := _m.Called(data)

	var r0 []threads.Core
	if rf, ok := ret.Get(0).(func(threads.Core) []threads.Core); ok {
		r0 = rf(data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]threads.Core)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(threads.Core) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectThreadAll provides a mock function with given fields: data
func (_m *Data) SelectThreadAll(data threads.Core) ([]threads.Core, error) {
	ret := _m.Called(data)

	var r0 []threads.Core
	if rf, ok := ret.Get(0).(func(threads.Core) []threads.Core); ok {
		r0 = rf(data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]threads.Core)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(threads.Core) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectThreadHome provides a mock function with given fields: data
func (_m *Data) SelectThreadHome(data threads.Core) ([]threads.Core, error) {
	ret := _m.Called(data)

	var r0 []threads.Core
	if rf, ok := ret.Get(0).(func(threads.Core) []threads.Core); ok {
		r0 = rf(data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]threads.Core)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(threads.Core) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectThreadUser provides a mock function with given fields: data
func (_m *Data) SelectThreadUser(data threads.Core) ([]threads.Core, error) {
	ret := _m.Called(data)

	var r0 []threads.Core
	if rf, ok := ret.Get(0).(func(threads.Core) []threads.Core); ok {
		r0 = rf(data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]threads.Core)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(threads.Core) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectThreadbyID provides a mock function with given fields: data
func (_m *Data) SelectThreadbyID(data threads.Core) (threads.Core, error) {
	ret := _m.Called(data)

	var r0 threads.Core
	if rf, ok := ret.Get(0).(func(threads.Core) threads.Core); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Get(0).(threads.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(threads.Core) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCommentbyOne provides a mock function with given fields: data
func (_m *Data) UpdateCommentbyOne(data threads.Core) error {
	ret := _m.Called(data)

	var r0 error
	if rf, ok := ret.Get(0).(func(threads.Core) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateLikebyOne provides a mock function with given fields: data
func (_m *Data) UpdateLikebyOne(data threads.Core) error {
	ret := _m.Called(data)

	var r0 error
	if rf, ok := ret.Get(0).(func(threads.Core) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateMinLikebyOne provides a mock function with given fields: data
func (_m *Data) UpdateMinLikebyOne(data threads.Core) error {
	ret := _m.Called(data)

	var r0 error
	if rf, ok := ret.Get(0).(func(threads.Core) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
