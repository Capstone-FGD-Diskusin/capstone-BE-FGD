// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	users "github.com/dragranzer/capstone-BE-FGD/features/users"
	mock "github.com/stretchr/testify/mock"
)

// Bussiness is an autogenerated mock type for the Bussiness type
type Bussiness struct {
	mock.Mock
}

// DecrementFol provides a mock function with given fields: data
func (_m *Bussiness) DecrementFol(data users.Core) error {
	ret := _m.Called(data)

	var r0 error
	if rf, ok := ret.Get(0).(func(users.Core) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DecrementFollowing provides a mock function with given fields: data
func (_m *Bussiness) DecrementFollowing(data users.Core) error {
	ret := _m.Called(data)

	var r0 error
	if rf, ok := ret.Get(0).(func(users.Core) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DecrementLike provides a mock function with given fields: data
func (_m *Bussiness) DecrementLike(data users.Core) error {
	ret := _m.Called(data)

	var r0 error
	if rf, ok := ret.Get(0).(func(users.Core) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DecrementThread provides a mock function with given fields: data
func (_m *Bussiness) DecrementThread(data users.Core) error {
	ret := _m.Called(data)

	var r0 error
	if rf, ok := ret.Get(0).(func(users.Core) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteDataUserbyId provides a mock function with given fields: data
func (_m *Bussiness) DeleteDataUserbyId(data users.Core) error {
	ret := _m.Called(data)

	var r0 error
	if rf, ok := ret.Get(0).(func(users.Core) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EditDataUser provides a mock function with given fields: data
func (_m *Bussiness) EditDataUser(data users.Core) error {
	ret := _m.Called(data)

	var r0 error
	if rf, ok := ret.Get(0).(func(users.Core) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllUser provides a mock function with given fields: data
func (_m *Bussiness) GetAllUser(data users.Core) ([]users.Core, error) {
	ret := _m.Called(data)

	var r0 []users.Core
	if rf, ok := ret.Get(0).(func(users.Core) []users.Core); ok {
		r0 = rf(data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]users.Core)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(users.Core) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProfileData provides a mock function with given fields: data
func (_m *Bussiness) GetProfileData(data users.Core) (users.Core, error) {
	ret := _m.Called(data)

	var r0 users.Core
	if rf, ok := ret.Get(0).(func(users.Core) users.Core); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Get(0).(users.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(users.Core) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IncrementFol provides a mock function with given fields: data
func (_m *Bussiness) IncrementFol(data users.Core) error {
	ret := _m.Called(data)

	var r0 error
	if rf, ok := ret.Get(0).(func(users.Core) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IncrementFollowing provides a mock function with given fields: data
func (_m *Bussiness) IncrementFollowing(data users.Core) error {
	ret := _m.Called(data)

	var r0 error
	if rf, ok := ret.Get(0).(func(users.Core) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IncrementLike provides a mock function with given fields: data
func (_m *Bussiness) IncrementLike(data users.Core) error {
	ret := _m.Called(data)

	var r0 error
	if rf, ok := ret.Get(0).(func(users.Core) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IncrementThread provides a mock function with given fields: data
func (_m *Bussiness) IncrementThread(data users.Core) error {
	ret := _m.Called(data)

	var r0 error
	if rf, ok := ret.Get(0).(func(users.Core) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Login provides a mock function with given fields: data
func (_m *Bussiness) Login(data users.Core) (users.Core, string, bool, error) {
	ret := _m.Called(data)

	var r0 users.Core
	if rf, ok := ret.Get(0).(func(users.Core) users.Core); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Get(0).(users.Core)
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(users.Core) string); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 bool
	if rf, ok := ret.Get(2).(func(users.Core) bool); ok {
		r2 = rf(data)
	} else {
		r2 = ret.Get(2).(bool)
	}

	var r3 error
	if rf, ok := ret.Get(3).(func(users.Core) error); ok {
		r3 = rf(data)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// Ranking provides a mock function with given fields:
func (_m *Bussiness) Ranking() ([]users.Core, error) {
	ret := _m.Called()

	var r0 []users.Core
	if rf, ok := ret.Get(0).(func() []users.Core); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]users.Core)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: data
func (_m *Bussiness) Register(data users.Core) error {
	ret := _m.Called(data)

	var r0 error
	if rf, ok := ret.Get(0).(func(users.Core) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpgradeToModerator provides a mock function with given fields: data
func (_m *Bussiness) UpgradeToModerator(data users.Core) error {
	ret := _m.Called(data)

	var r0 error
	if rf, ok := ret.Get(0).(func(users.Core) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
